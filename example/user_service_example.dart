import 'package:firebase_core/firebase_core.dart';
import 'package:jafary_channel_app/models/user_model.dart';
import 'package:jafary_channel_app/services/user_service.dart';

/// Example demonstrating UserService usage
/// 
/// This example shows how to:
/// - Create users
/// - Search and filter users
/// - Check permissions
/// - Update user data
/// 
/// Note: This is for demonstration purposes only.
/// In a real app, Firebase would be initialized in main.dart
void main() async {
  // Initialize Firebase (required for Firestore)
  await Firebase.initializeApp();
  
  // Create UserService instance
  final userService = UserService();
  
  print('=== UserService Example ===\n');
  
  try {
    // Example 1: Create a new user
    print('1. Creating a new user...');
    final newUser = UserModel(
      id: '', // Will be generated by Firestore
      username: 'john_doe',
      name: 'John Doe',
      phoneNumber: '9876543210',
      address: '123 Main Street, City, State',
      area: 'Downtown',
      role: UserRole.USER,
      preferredLanguage: 'en',
      createdAt: DateTime.now(),
    );
    
    final userId = await userService.createUser(newUser);
    print('   Created user with ID: $userId\n');
    
    // Example 2: Get user by ID
    print('2. Retrieving user by ID...');
    final retrievedUser = await userService.getUserById(userId);
    if (retrievedUser != null) {
      print('   Found user: ${retrievedUser.name} (${retrievedUser.phoneNumber})');
    } else {
      print('   User not found');
    }
    print('');
    
    // Example 3: Search users by phone number
    print('3. Searching user by phone number...');
    final userByPhone = await userService.getUserByPhoneNumber('9876543210');
    if (userByPhone != null) {
      print('   Found user: ${userByPhone.name}');
    } else {
      print('   User not found');
    }
    print('');
    
    // Example 4: Update user information
    print('4. Updating user information...');
    await userService.updateUser(userId, {
      'name': 'John Smith',
      'area': 'Uptown',
    });
    print('   User updated successfully\n');
    
    // Example 5: Create admin and collector users
    print('5. Creating admin and collector users...');
    
    final adminUser = UserModel(
      id: '',
      username: 'admin_user',
      name: 'Admin User',
      phoneNumber: '9876543211',
      address: 'Admin Address',
      area: 'Admin Area',
      role: UserRole.ADMIN,
      preferredLanguage: 'en',
      createdAt: DateTime.now(),
    );
    
    final collectorUser = UserModel(
      id: '',
      username: 'collector_user',
      name: 'Collector User',
      phoneNumber: '9876543212',
      address: 'Collector Address',
      area: 'Collector Area',
      role: UserRole.COLLECTOR,
      preferredLanguage: 'en',
      createdAt: DateTime.now(),
    );
    
    final adminId = await userService.createUser(adminUser);
    final collectorId = await userService.createUser(collectorUser);
    
    print('   Created admin user with ID: $adminId');
    print('   Created collector user with ID: $collectorId\n');
    
    // Example 6: Check permissions
    print('6. Checking user permissions...');
    
    final hasAdminPermission = await userService.hasAdminPermission(adminId);
    final hasCollectorPermission = await userService.hasCollectorPermission(collectorId);
    final canManageUsers = await userService.canManageUsers(adminId);
    
    print('   Admin has admin permission: $hasAdminPermission');
    print('   Collector has collector permission: $hasCollectorPermission');
    print('   Admin can manage users: $canManageUsers\n');
    
    // Example 7: Filter users by role
    print('7. Filtering users by role...');
    
    final adminUsers = await userService.getUsersByRole(UserRole.ADMIN);
    final collectorUsers = await userService.getUsersByRole(UserRole.COLLECTOR);
    final regularUsers = await userService.getUsersByRole(UserRole.USER);
    
    print('   Admin users: ${adminUsers.length}');
    print('   Collector users: ${collectorUsers.length}');
    print('   Regular users: ${regularUsers.length}\n');
    
    // Example 8: Search users by name
    print('8. Searching users by name...');
    
    final searchResults = await userService.searchUsersByName('John');
    print('   Found ${searchResults.length} users with "John" in their name:');
    for (final user in searchResults) {
      print('     - ${user.name} (${user.phoneNumber})');
    }
    print('');
    
    // Example 9: Get all areas
    print('9. Getting all unique areas...');
    
    final areas = await userService.getAllAreas();
    print('   Areas: ${areas.join(', ')}\n');
    
    // Example 10: Update wallet balance
    print('10. Updating wallet balance...');
    
    await userService.updateWalletBalance(userId, 500.0);
    print('    Updated wallet balance to ₹500\n');
    
    // Example 11: Get user count by role
    print('11. Getting user count by role...');
    
    final userCounts = await userService.getUserCountByRole();
    print('    User counts:');
    userCounts.forEach((role, count) {
      print('      ${role.toString().split('.').last}: $count');
    });
    print('');
    
    // Example 12: Check if phone number is registered
    print('12. Checking phone number registration...');
    
    final isRegistered = await userService.isPhoneNumberRegistered('9876543210');
    final isNotRegistered = await userService.isPhoneNumberRegistered('9999999999');
    
    print('    9876543210 is registered: $isRegistered');
    print('    9999999999 is registered: $isNotRegistered\n');
    
    // Example 13: Soft delete user
    print('13. Soft deleting user...');
    
    await userService.deleteUser(userId);
    print('    User soft deleted (isActive set to false)\n');
    
    // Example 14: Stream users (real-time updates)
    print('14. Setting up real-time user stream...');
    
    final userStream = userService.getUsersStream(
      area: 'Downtown',
      isActive: true,
    );
    
    print('    Stream set up for active users in Downtown area');
    print('    (In a real app, you would listen to this stream for UI updates)\n');
    
    print('=== UserService Example Complete ===');
    
  } catch (e) {
    print('Error: $e');
  }
}

/// Example of role-based permission checking
void demonstratePermissions() async {
  final userService = UserService();
  
  print('=== Permission Examples ===\n');
  
  // Example permission checks
  const adminUserId = 'admin-user-id';
  const collectorUserId = 'collector-user-id';
  const regularUserId = 'regular-user-id';
  const targetUserId = 'target-user-id';
  
  // Admin permissions
  print('Admin Permissions:');
  print('  Can manage users: ${await userService.canManageUsers(adminUserId)}');
  print('  Can delete users: ${await userService.canDeleteUser(adminUserId)}');
  print('  Can change roles: ${await userService.canChangeUserRole(adminUserId)}');
  print('  Can edit other users: ${await userService.canEditUser(adminUserId, targetUserId)}');
  
  // Collector permissions
  print('\nCollector Permissions:');
  print('  Has collector permission: ${await userService.hasCollectorPermission(collectorUserId)}');
  print('  Can view users: ${await userService.canViewUser(collectorUserId, targetUserId)}');
  print('  Can manage users: ${await userService.canManageUsers(collectorUserId)}');
  
  // Regular user permissions
  print('\nRegular User Permissions:');
  print('  Can view own data: ${await userService.canViewUser(regularUserId, regularUserId)}');
  print('  Can edit own data: ${await userService.canEditUser(regularUserId, regularUserId)}');
  print('  Can view other users: ${await userService.canViewUser(regularUserId, targetUserId)}');
  
  print('\n=== Permission Examples Complete ===');
}

/// Example of data validation
void demonstrateValidation() {
  print('=== Validation Examples ===\n');
  
  // Valid user
  final validUser = UserModel(
    id: 'test-id',
    username: 'valid_user_name',
    name: 'Valid User Name',
    phoneNumber: '9876543210',
    address: 'Valid address with sufficient length for validation',
    area: 'Valid Area',
    role: UserRole.USER,
    preferredLanguage: 'en',
    createdAt: DateTime.now(),
  );
  
  print('Valid User Validation:');
  final validationErrors = validUser.validate();
  if (validationErrors.isEmpty) {
    print('  ✓ User data is valid');
  } else {
    print('  ✗ Validation errors: $validationErrors');
  }
  
  // Invalid user
  final invalidUser = UserModel(
    id: 'test-id',
    username: '', // Invalid: empty username
    name: '', // Invalid: empty name
    phoneNumber: 'invalid-phone', // Invalid: bad format
    address: 'Short', // Invalid: too short
    area: '', // Invalid: empty area
    role: UserRole.USER,
    preferredLanguage: 'en',
    createdAt: DateTime.now(),
    walletBalance: -100.0, // Invalid: negative balance
  );
  
  print('\nInvalid User Validation:');
  final invalidErrors = invalidUser.validate();
  if (invalidErrors.isEmpty) {
    print('  ✓ User data is valid');
  } else {
    print('  ✗ Validation errors:');
    invalidErrors.forEach((field, error) {
      print('    $field: $error');
    });
  }
  
  print('\n=== Validation Examples Complete ===');
}