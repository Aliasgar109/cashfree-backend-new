rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'ADMIN';
    }
    
    function isCollector() {
      return isAuthenticated() && getUserRole() == 'COLLECTOR';
    }
    
    function isAdminOrCollector() {
      return isAuthenticated() && (getUserRole() == 'ADMIN' || getUserRole() == 'COLLECTOR');
    }
    
    function isOwnerOrAdminOrCollector(userId) {
      return isAuthenticated() && (
        request.auth.uid == userId || 
        getUserRole() == 'ADMIN' || 
        getUserRole() == 'COLLECTOR'
      );
    }
    
    // Validation functions
    function isValidPhoneNumber(phone) {
      return phone is string && 
             phone.matches('^\\+91[6-9][0-9]{9}$');
    }
    
    function isValidUserRole(role) {
      return role in ['USER', 'COLLECTOR', 'ADMIN'];
    }
    
    function isValidPaymentStatus(status) {
      return status in ['PENDING', 'APPROVED', 'REJECTED'];
    }
    
    function isValidPaymentMethod(method) {
      return method in ['UPI', 'CASH', 'WALLET'];
    }
    
    function isValidAmount(amount) {
      return amount is number && amount > 0 && amount <= 100000;
    }
    
    function isValidLanguage(lang) {
      return lang in ['en', 'gu'];
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isOwnerOrAdminOrCollector(userId);
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       isValidUserData(request.resource.data);
      
      allow update: if isOwnerOrAdminOrCollector(userId) &&
                       isValidUserUpdateData(request.resource.data, resource.data);
      
      allow delete: if isAdmin();
      
      function isValidUserData(data) {
        return data.keys().hasAll(['name', 'phoneNumber', 'address', 'area', 'role', 'preferredLanguage']) &&
               data.name is string && data.name.size() >= 2 && data.name.size() <= 50 &&
               isValidPhoneNumber(data.phoneNumber) &&
               data.address is string && data.address.size() >= 10 && data.address.size() <= 200 &&
               data.area is string && data.area.size() >= 2 && data.area.size() <= 30 &&
               isValidUserRole(data.role) &&
               isValidLanguage(data.preferredLanguage) &&
               data.walletBalance is number && data.walletBalance >= 0 &&
               data.createdAt is timestamp &&
               data.isActive is bool;
      }
      
      function isValidUserUpdateData(newData, oldData) {
        // Only allow certain fields to be updated
        let allowedFields = ['name', 'address', 'area', 'preferredLanguage', 'walletBalance', 'lastPaymentDate', 'isActive'];
        let updatedFields = newData.diff(oldData).affectedKeys();
        
        return updatedFields.hasOnly(allowedFields) &&
               ((!('name' in updatedFields)) || (newData.name is string && newData.name.size() >= 2 && newData.name.size() <= 50)) &&
               ((!('address' in updatedFields)) || (newData.address is string && newData.address.size() >= 10 && newData.address.size() <= 200)) &&
               ((!('area' in updatedFields)) || (newData.area is string && newData.area.size() >= 2 && newData.area.size() <= 30)) &&
               ((!('preferredLanguage' in updatedFields)) || isValidLanguage(newData.preferredLanguage)) &&
               ((!('walletBalance' in updatedFields)) || (newData.walletBalance is number && newData.walletBalance >= 0)) &&
               ((!('isActive' in updatedFields)) || newData.isActive is bool);
      }
    }
    
    // Payments collection rules
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdminOrCollector()
      );
      
      allow create: if isAuthenticated() && 
                       isValidPaymentData(request.resource.data) &&
                       (request.resource.data.userId == request.auth.uid || isAdminOrCollector());
      
      allow update: if isAuthenticated() && 
                       isValidPaymentUpdateData(request.resource.data, resource.data) &&
                       (resource.data.userId == request.auth.uid || isAdminOrCollector());
      
      allow delete: if isAdmin();
      
      function isValidPaymentData(data) {
        return data.keys().hasAll(['userId', 'amount', 'method', 'status', 'createdAt', 'year']) &&
               data.userId is string &&
               isValidAmount(data.amount) &&
               isValidPaymentMethod(data.method) &&
               isValidPaymentStatus(data.status) &&
               data.createdAt is timestamp &&
               data.year is number && data.year >= 2020 && data.year <= 2030 &&
               ((!('extraCharges' in data)) || (data.extraCharges is number && data.extraCharges >= 0)) &&
               ((!('transactionId' in data)) || (data.transactionId is string && data.transactionId.size() >= 6 && data.transactionId.size() <= 50)) &&
               ((!('receiptNumber' in data)) || (data.receiptNumber is string && data.receiptNumber.size() >= 6 && data.receiptNumber.size() <= 20));
      }
      
      function isValidPaymentUpdateData(newData, oldData) {
        let allowedFields = ['status', 'approvedAt', 'approvedBy', 'receiptNumber', 'transactionId', 'screenshotUrl'];
        let updatedFields = newData.diff(oldData).affectedKeys();
        
        return updatedFields.hasOnly(allowedFields) &&
               ((!('status' in updatedFields)) || isValidPaymentStatus(newData.status)) &&
               ((!('transactionId' in updatedFields)) || (newData.transactionId is string && newData.transactionId.size() >= 6 && newData.transactionId.size() <= 50)) &&
               ((!('receiptNumber' in updatedFields)) || (newData.receiptNumber is string && newData.receiptNumber.size() >= 6 && newData.receiptNumber.size() <= 20));
      }
    }
    
    // Receipts collection rules
    match /receipts/{receiptId} {
      allow read: if isAuthenticated() && (
        get(/databases/$(database)/documents/payments/$(resource.data.paymentId)).data.userId == request.auth.uid ||
        isAdminOrCollector()
      );
      
      allow create: if isAdminOrCollector() && 
                       isValidReceiptData(request.resource.data);
      
      allow update: if isAdminOrCollector();
      
      allow delete: if isAdmin();
      
      function isValidReceiptData(data) {
        return data.keys().hasAll(['paymentId', 'receiptNumber', 'generatedAt', 'language']) &&
               data.paymentId is string &&
               data.receiptNumber is string && data.receiptNumber.size() >= 6 && data.receiptNumber.size() <= 20 &&
               data.generatedAt is timestamp &&
               isValidLanguage(data.language) &&
               ((!('pdfUrl' in data)) || data.pdfUrl is string);
      }
    }
    
    // Wallet transactions collection rules
    match /wallet_transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdminOrCollector()
      );
      
      allow create: if isAuthenticated() && 
                       isValidWalletTransactionData(request.resource.data) &&
                       (request.resource.data.userId == request.auth.uid || isAdminOrCollector());
      
      allow update: if false; // Wallet transactions should be immutable
      
      allow delete: if isAdmin();
      
      function isValidWalletTransactionData(data) {
        return data.keys().hasAll(['userId', 'amount', 'type', 'createdAt']) &&
               data.userId is string &&
               data.amount is number && data.amount != 0 &&
               data.type in ['CREDIT', 'DEBIT'] &&
               data.createdAt is timestamp &&
               ((!('description' in data)) || (data.description is string && data.description.size() <= 200));
      }
    }
    
    // Settings collection rules (admin only)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidSettingsData(request.resource.data);
      
      function isValidSettingsData(data) {
        return ((!('yearlyFee' in data)) || (data.yearlyFee is number && data.yearlyFee > 0)) &&
               ((!('lateFeesPercentage' in data)) || (data.lateFeesPercentage is number && data.lateFeesPercentage >= 0 && data.lateFeesPercentage <= 100)) &&
               ((!('wireChargePerMeter' in data)) || (data.wireChargePerMeter is number && data.wireChargePerMeter >= 0)) &&
               ((!('autoApprovalEnabled' in data)) || data.autoApprovalEnabled is bool) &&
               ((!('reminderDaysBefore' in data)) || (data.reminderDaysBefore is number && data.reminderDaysBefore >= 0 && data.reminderDaysBefore <= 365));
      }
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdminOrCollector()
      );
      
      allow create: if isAdminOrCollector() && 
                       isValidNotificationData(request.resource.data);
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      allow delete: if isAdmin();
      
      function isValidNotificationData(data) {
        return data.keys().hasAll(['userId', 'title', 'body', 'type', 'createdAt', 'isRead']) &&
               data.userId is string &&
               data.title is string && data.title.size() <= 100 &&
               data.body is string && data.body.size() <= 500 &&
               data.type is string &&
               data.createdAt is timestamp &&
               data.isRead is bool;
      }
    }
    
    // Audit logs collection rules (admin only)
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && isValidAuditLogData(request.resource.data);
      allow update: if false; // Audit logs should be immutable
      allow delete: if false; // Audit logs should never be deleted
      
      function isValidAuditLogData(data) {
        return data.keys().hasAll(['userId', 'action', 'resource', 'timestamp']) &&
               data.userId is string &&
               data.action is string && data.action.size() <= 50 &&
               data.resource is string && data.resource.size() <= 100 &&
               data.timestamp is timestamp &&
               ((!('details' in data)) || (data.details is map && data.details.size() <= 10));
      }
    }
    
    // Deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}