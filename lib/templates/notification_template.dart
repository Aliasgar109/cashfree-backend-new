import 'package:flutter/material.dart';
import '../models/models.dart';
import '../utils/localization_helper.dart';

/// Notification template generator with localization support
class NotificationTemplate {
  /// Generate payment reminder notification
  static Map<String, String> generatePaymentReminder({
    required UserModel user,
    required double amount,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return {
        'title': 'ркЪрлБркХрк╡ркгрлА рк░рк┐ркорк╛ркЗркирлНркбрк░',
        'body': 'рккрлНрк░рк┐ркп ${user.name}, ркдркорк╛рк░рлА рк╡рк╛рк░рлНрк╖рк┐ркХ ркЯрлАрк╡рлА рк╕ркмрлНрк╕рлНркХрлНрк░рк┐рккрлНрк╢рки рклрлА ${LocalizationHelper.formatCurrency(context, amount)} ркмрк╛ркХрлА ркЫрлЗ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ ркЪрлВркХрк╡ркгрлА ркХрк░рлЛ.',
      };
    } else {
      return {
        'title': 'Payment Reminder',
        'body': 'Dear ${user.name}, your yearly TV subscription fee of ${LocalizationHelper.formatCurrency(context, amount)} is due. Please make the payment at your earliest convenience.',
      };
    }
  }
  
  /// Generate payment approval notification
  static Map<String, String> generatePaymentApproval({
    required UserModel user,
    required PaymentModel payment,
    required String receiptNumber,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return {
        'title': 'ркЪрлБркХрк╡ркгрлА ркоркВркЬрлВрк░ ркеркИ',
        'body': 'рккрлНрк░рк┐ркп ${user.name}, ркдркорк╛рк░рлА ${LocalizationHelper.formatCurrency(context, payment.amount)} ркирлА ркЪрлБркХрк╡ркгрлА ркоркВркЬрлВрк░ ркеркИ ркЧркИ ркЫрлЗ. рк░рк╕рлАркж ркиркВ: $receiptNumber',
      };
    } else {
      return {
        'title': 'Payment Approved',
        'body': 'Dear ${user.name}, your payment of ${LocalizationHelper.formatCurrency(context, payment.amount)} has been approved. Receipt No: $receiptNumber',
      };
    }
  }
  
  /// Generate payment rejection notification
  static Map<String, String> generatePaymentRejection({
    required UserModel user,
    required PaymentModel payment,
    required String reason,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return {
        'title': 'ркЪрлБркХрк╡ркгрлА ркиркХрк╛рк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлА',
        'body': 'рккрлНрк░рк┐ркп ${user.name}, ркдркорк╛рк░рлА ${LocalizationHelper.formatCurrency(context, payment.amount)} ркирлА ркЪрлБркХрк╡ркгрлА ркиркХрк╛рк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ. ркХрк╛рк░ркг: $reason',
      };
    } else {
      return {
        'title': 'Payment Rejected',
        'body': 'Dear ${user.name}, your payment of ${LocalizationHelper.formatCurrency(context, payment.amount)} has been rejected. Reason: $reason',
      };
    }
  }
  
  /// Generate overdue payment notification
  static Map<String, String> generateOverdueNotification({
    required UserModel user,
    required double amount,
    required int daysPastDue,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return {
        'title': 'ркорлБркжркд рк╡рлАркдрлА ркЧркИ - ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ ркЪрлБркХрк╡ркгрлА ркХрк░рлЛ',
        'body': 'рккрлНрк░рк┐ркп ${user.name}, ркдркорк╛рк░рлА ${LocalizationHelper.formatCurrency(context, amount)} ркирлА ркЪрлБркХрк╡ркгрлА $daysPastDue ркжрк┐рк╡рк╕ркерлА ркмрк╛ркХрлА ркЫрлЗ. ркорлЛркбрлА рклрлА рк▓рк╛ркЧрлБ ркеркИ рк╢ркХрлЗ ркЫрлЗ.',
      };
    } else {
      return {
        'title': 'Payment Overdue - Immediate Action Required',
        'body': 'Dear ${user.name}, your payment of ${LocalizationHelper.formatCurrency(context, amount)} is $daysPastDue days overdue. Late fees may apply.',
      };
    }
  }
  
  /// Generate welcome notification for new users
  static Map<String, String> generateWelcomeNotification({
    required UserModel user,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return {
        'title': 'рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!',
        'body': 'рккрлНрк░рк┐ркп ${user.name}, ркЯрлАрк╡рлА рк╕ркмрлНрк╕рлНркХрлНрк░рк┐рккрлНрк╢рки ркПрккркорк╛ркВ ркдркорк╛рк░рлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ. рк╣рк╡рлЗ ркдркорлЗ рк╕рк░рк│ркдрк╛ркерлА ркдркорк╛рк░рлА ркЪрлБркХрк╡ркгрлАркУ ркХрк░рлА рк╢ркХрлЛ ркЫрлЛ.',
      };
    } else {
      return {
        'title': 'Welcome!',
        'body': 'Dear ${user.name}, welcome to the TV Subscription app. You can now easily make your payments and manage your account.',
      };
    }
  }
  
  /// Generate receipt sharing message for WhatsApp
  static String generateReceiptSharingMessage({
    required UserModel user,
    required PaymentModel payment,
    required String receiptNumber,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return '''
ЁЯз╛ *ркЯрлАрк╡рлА рк╕ркмрлНрк╕рлНркХрлНрк░рк┐рккрлНрк╢рки ркЪрлБркХрк╡ркгрлА рк░рк╕рлАркж*

ЁЯУЛ рк░рк╕рлАркж ркиркВ: $receiptNumber
ЁЯСд ркирк╛рко: ${user.name}
ЁЯТ░ рк░ркХрко: ${LocalizationHelper.formatCurrency(context, payment.amount)}
ЁЯУЕ ркдрк╛рк░рлАркЦ: ${LocalizationHelper.formatDate(context, payment.createdAt)}
тЬЕ рк╕рлНркерк┐ркдрк┐: ${LocalizationHelper.getPaymentStatusText(context, payment.status.toString())}

ркЖркнрк╛рк░! ЁЯЩП
      ''';
    } else {
      return '''
ЁЯз╛ *TV Subscription Payment Receipt*

ЁЯУЛ Receipt No: $receiptNumber
ЁЯСд Name: ${user.name}
ЁЯТ░ Amount: ${LocalizationHelper.formatCurrency(context, payment.amount)}
ЁЯУЕ Date: ${LocalizationHelper.formatDate(context, payment.createdAt)}
тЬЕ Status: ${LocalizationHelper.getPaymentStatusText(context, payment.status.toString())}

Thank you! ЁЯЩП
      ''';
    }
  }
  
  /// Generate SMS reminder message
  static String generateSMSReminder({
    required UserModel user,
    required double amount,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return 'рккрлНрк░рк┐ркп ${user.name}, ркдркорк╛рк░рлА ркЯрлАрк╡рлА рк╕ркмрлНрк╕рлНркХрлНрк░рк┐рккрлНрк╢рки рклрлА ${LocalizationHelper.formatCurrency(context, amount)} ркмрк╛ркХрлА ркЫрлЗ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркПркк ркжрлНрк╡рк╛рк░рк╛ ркЪрлБркХрк╡ркгрлА ркХрк░рлЛ.';
    } else {
      return 'Dear ${user.name}, your TV subscription fee of ${LocalizationHelper.formatCurrency(context, amount)} is due. Please make payment through the app.';
    }
  }
  
  /// Generate collector notification for cash payment
  static Map<String, String> generateCashPaymentNotification({
    required UserModel user,
    required PaymentModel payment,
    required String collectorName,
    required String languageCode,
    required BuildContext context,
  }) {
    if (languageCode == 'gu') {
      return {
        'title': 'рк░рлЛркХркб ркЪрлБркХрк╡ркгрлА рк░рлЗркХрлЛрк░рлНркб ркеркИ',
        'body': '${user.name} ркжрлНрк╡рк╛рк░рк╛ ${LocalizationHelper.formatCurrency(context, payment.amount)} ркирлА рк░рлЛркХркб ркЪрлБркХрк╡ркгрлА $collectorName ркжрлНрк╡рк╛рк░рк╛ рк░рлЗркХрлЛрк░рлНркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ.',
      };
    } else {
      return {
        'title': 'Cash Payment Recorded',
        'body': 'Cash payment of ${LocalizationHelper.formatCurrency(context, payment.amount)} by ${user.name} has been recorded by $collectorName.',
      };
    }
  }
}